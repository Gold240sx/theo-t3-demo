import type { NextPage, GetStaticProps, InferGetStaticPropsType } from "next";
import { generateSSGHelper } from "../server/helpers/ssgHelper";
import Head from "next/head";
import { api } from "~/utils/api";

import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import superjson from "superjson";
import { type } from "os";
import { TypeOf } from "zod";
import { PageLayout } from "~/components/layout";
import Image from "next/image";

const ProfilePage: NextPage<{ username: string }> = ({
    username,
}: InferGetStaticPropsType<typeof getStaticProps>) => {
    const { data } = api.profile.getUserByUsername.useQuery({
        username,
    });

    if (!data) return <div>404</div>;

    return (
        <>
            <Head>
                <title>{data.username}</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <PageLayout>
                <div className="relative h-48 border-b border-zinc-400 bg-zinc-600">
                    <Image
                        src={data.profilePicture}
                        alt={` ${data.username ?? ""} profile picture `}
                        width={128}
                        height={128}
                        className="absolute bottom-0 left-0 -mb-16 ml-6 rounded-full border-4 border-black bg-black "
                    />
                </div>
                <div className="h-16"></div>
                <div className="px-6 py-4 text-2xl capitalize text-teal-400">
                    @
                    <span className="font-bold text-zinc-200">
                        {`${data.username ?? ""}`}
                    </span>
                </div>
                <div className="border-full border-b border-zinc-400"></div>
            </PageLayout>
        </>
    );
};

export const getStaticProps: GetStaticProps = async (context) => {
    const ssg = generateSSGHelper();

    const slug = context.params?.slug as string;
    if (typeof slug !== "string") throw new Error("no Slug");

    const username = slug.replace("@", "");

    // prefetch data and hydrate through server-side props
    await ssg.profile.getUserByUsername.prefetch({ username });

    return {
        props: {
            trpcState: ssg.dehydrate(),
            username,
        },
    };
};

export const getStaticPaths = () => {
    return { paths: [], fallback: "blocking" };
};

export default ProfilePage;
